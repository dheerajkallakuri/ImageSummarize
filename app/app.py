import sys
import os
from PyQt5.QtWidgets import (QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QHBoxLayout, QFileDialog, QGraphicsView, 
                             QMessageBox, QTextBrowser)
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt
from PIL import Image, ImageOps, ImageDraw, ImageFont
from captionGenerator import get_caption_lstm, get_caption_gpt1
from fetchImage import download_random_image
import datetime
import textwrap

class ImageCaptionApp(QWidget):
    def __init__(self):
        super().__init__()

        # Set up layout
        self.setWindowTitle("Image Summarize Generator")
        self.setFixedSize(540, 750)
        
        # Initialize UI components
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # Row 1: Load Sample Image and Upload Image Buttons
        row1 = QHBoxLayout()
        self.load_sample_btn = QPushButton("Load Sample Image")
        self.load_sample_btn.clicked.connect(self.load_sample_image)
        self.upload_image_btn = QPushButton("Upload Image")
        self.upload_image_btn.clicked.connect(self.upload_image)

        row1.addWidget(self.load_sample_btn)
        row1.addWidget(self.upload_image_btn)

        # Row 2: Preview the image in 500x500 canvas with black background
        self.image_label = QLabel()
        self.image_label.setFixedSize(500, 500)
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("background-color: black;")
        
        
        # Row 3: Caption display label
        self.caption_label = QTextBrowser(self)
        self.caption_label.setFixedHeight(80)


        # Row 4: Buttons to generate captions using LSTM and GPT-1
        row4 = QHBoxLayout()
        self.lstm_btn = QPushButton("Generate Caption (LSTM)")
        self.lstm_btn.clicked.connect(self.generate_caption_lstm)
        self.gpt1_btn = QPushButton("Generate Caption (GPT-1)")
        self.gpt1_btn.clicked.connect(self.generate_caption_gpt1)

        row4.addWidget(self.lstm_btn)
        row4.addWidget(self.gpt1_btn)

        # Row 5: Save button to save the image with caption
        self.save_btn = QPushButton("Save Image with Caption")
        self.save_btn.clicked.connect(self.save_image_with_caption)
        
        # Add rows to main layout
        layout.addLayout(row1)
        layout.addWidget(self.image_label)
        layout.addWidget(self.caption_label)
        layout.addLayout(row4)
        layout.addWidget(self.save_btn)

        self.setLayout(layout)
        
        # To hold the image and caption data
        self.current_image = None
        self.canvas_current_image = None
        self.image_with_background = None
        self.image_for_caption = None
        self.current_caption = ""

    def load_sample_image(self):
        download_random_image()
        sample_image_path = "sample.jpg"  # Replace with the actual path to your sample image
        self.load_image(sample_image_path)

    def upload_image(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "Upload Image", "", "Image Files (*.png *.jpg *.jpeg)")
        if file_name:
            self.load_image(file_name)

    def load_image(self, file_path):
        self.current_image = Image.open(file_path)

        canvas_size=(500, 500)
        self.image_with_background = Image.new('RGB', canvas_size, (0, 0, 0))
        self.canvas_current_image = ImageOps.contain(self.current_image, canvas_size)
        x_offset = (canvas_size[0] - self.canvas_current_image.width) // 2
        y_offset = (canvas_size[1] - self.canvas_current_image.height) // 2
        self.image_with_background.paste(self.canvas_current_image, (x_offset, y_offset))
      
        # Convert to QPixmap for preview
        qimage = self.pil_to_qimage(self.image_with_background)
        pixmap = QPixmap.fromImage(qimage)
        
        # Set the pixmap to the label
        self.image_label.setPixmap(pixmap)

    def pil_to_qimage(self, pil_image):
        rgb_image = pil_image.convert("RGB")
        data = rgb_image.tobytes("raw", "RGB")
        qimage = QImage(data, rgb_image.size[0], rgb_image.size[1], QImage.Format_RGB888)
        return qimage

    def generate_caption_lstm(self):
        self.current_caption = get_caption_lstm(self.current_image.convert('RGB'))
        self.caption_label.setHtml(f"<p>{self.current_caption}</p>")

    def generate_caption_gpt1(self):
        # Placeholder for GPT-1 caption generation logic
        self.current_caption = "This is a caption generated by GPT-1."
        self.current_caption = get_caption_gpt1(self.current_image.convert('RGB'))
        self.caption_label.setHtml(f"<p>{self.current_caption}</p>")

    def save_image_with_caption(self):
        if not self.current_image:
            QMessageBox.warning(self, "Error", "No image loaded.")
            return

        # Create a new image with the caption
        output_image = self.create_image_with_caption()

        # Generate the filename
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = f"output_image_{timestamp}.jpg"

        # Save the image
        output_image.save(output_path)

        # Show a success message
        QMessageBox.information(self, "Image Saved", f"Image saved as {output_path}")

    def create_image_with_caption(self):
        """Create a new image that combines the original image with the caption below it"""
        # Create a new canvas (500x1200) for image + caption
        caption_height = 150
        padding = 20
        canvas_width = max(self.image_with_background.width, 600)
        canvas_height = self.image_with_background.height + caption_height

        canvas = Image.new("RGB", (canvas_width, canvas_height), (0, 0, 0))  # Black canvas

        # Paste the image on the canvas
        image_x = (canvas_width - self.image_with_background.width) // 2
        canvas.paste(self.image_with_background, (image_x, 0))

        # Add caption below the image
        draw = ImageDraw.Draw(canvas)
        font = ImageFont.truetype("Times New Roman.ttf", 18)

        wrapped_caption = textwrap.fill(self.current_caption, width=60)  # Adjust width to control wrapping
        lines = wrapped_caption.split('\n')

        # Calculate the total height of the text block (for vertical alignment)
        total_text_height = 0
        line_heights = []
        for line in lines:
            bbox = draw.textbbox((0, 0), line, font=font)
            line_height = bbox[3] - bbox[1]
            line_heights.append(line_height)
            total_text_height += line_height

        # Start drawing the text below the image with padding
        y_position = self.image_with_background.height + padding

        for i, line in enumerate(lines):
            text_width = draw.textlength(line, font=font)
            x_position = (canvas_width - text_width) // 2  # Center the text

            # Draw each line of text
            draw.text((x_position, y_position), line, fill=(255, 255, 255), font=font)
            y_position += line_heights[i]

        return canvas

# Main application
if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = ImageCaptionApp()
    window.show()
    sys.exit(app.exec_())
